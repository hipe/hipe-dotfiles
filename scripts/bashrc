echo "executing ~/.bashrc"

export PATH="/opt/local/bin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/bin"
export PATH="$HOME/.gem/ruby/1.8/bin:/usr/local/mysql/bin:/usr/local/gin/bin:/usr/X11/bin:$PATH"
export PATH="$HOME/.rvm/bin:$PATH"

# export PATH="$PATH:/usr/local/git/bin"    it's just in /usr/local/bin, or ~/bin

# when installing git for single user, need to put them somehwere
# export MANPATH="$HOME/doc"

# System-wide .profile for sh(1)

# my manpath got botched at somepoint
# http://www.stereoplex.com/2008/feb/5/mac-os-x-command-and-manual-search-path-path-and-m/

if [ -x /usr/libexec/path_helper ]; then
  eval `/usr/libexec/path_helper -s`
fi

# the above munges path.  no matter what we want the below first
export PATH="$HOME/bin:$PATH"

export MANPATH=`manpath`

#  nothing interesting in their
# if [ "${BASH-no}" != "no" ]; then
#  [ -r /etc/bashrc ] && . /etc/bashrc
# fi


# Colors
# See following for more information: http://www.infinitered.com/blog/?p=19
export TERM=xterm-color
export GREP_OPTIONS='--color=auto' GREP_COLOR='1;32'
export CLICOLOR=1

# Setup some colors to use later in interactive shell or scripts
export COLOR_NC='\033[0m' # No Color
export COLOR_WHITE='\033[1;37m'
export COLOR_BLACK='\033[0;30m'
export COLOR_BLUE='\033[0;34m'
export COLOR_LIGHT_BLUE='\033[1;34m'
export COLOR_GREEN='\033[0;32m'
export COLOR_LIGHT_GREEN='\033[1;32m'
export COLOR_CYAN='\033[0;36m'
export COLOR_LIGHT_CYAN='\033[1;36m'
export COLOR_RED='\033[0;31m'
export COLOR_LIGHT_RED='\033[1;31m'
export COLOR_PURPLE='\033[0;35m'
export COLOR_LIGHT_PURPLE='\033[1;35m'
export COLOR_BROWN='\033[0;33m'
export COLOR_YELLOW='\033[1;33m'
export COLOR_GRAY='\033[1;37m' # was black
export COLOR_LIGHT_GRAY='\033[0;37m'
alias colorslist="set | egrep 'COLOR_\w*'"  # Lists all the colors, uses vars in .bashrc_non-interactive

# Misc
export HISTCONTROL=ignoredups
shopt -s checkwinsize # After each command, checks the windows size and changes lines and columns

# bash completion settings (actually, these are readline settings)
bind "set completion-ignore-case on" # note: bind used instead of sticking these in .inputrc
bind "set bell-style none" # no bell
bind "set show-all-if-ambiguous On" # show list automatically, without double tab

# Turn on advanced bash completion if the file exists (get it here: http://www.caliban.org/bash/index.shtml#completion)
if [ -f /etc/bash_completion ]; then
   . /etc/bash_completion
fi

# Prompts
export PS1="\[${COLOR_GREEN}\]\w > \[${COLOR_NC}\]"  # Primary prompt with only a path
# export PS1="\[${COLOR_GRAY}\]\u@\h \[${COLOR_GREEN}\]\w > \[${COLOR_NC}\]"  # Primary prompt with user, host, and path

# This runs before the prompt and sets the title of the xterm* window.  If you set the title in the prompt
# weird wrapping errors occur on some systems, so this method is superior
export PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*} ${PWD}"; echo -ne "\007"'  # user@host path

export PS2='> '    # Secondary prompt
export PS3='#? '   # Prompt 3
export PS4='+'     # Prompt 4

function xtitle {  # change the title of your xterm* window
 unset PROMPT_COMMAND
 echo -ne "\033]0;$1\007"
}


# Editors
export EDITOR='mate -w'  # OS-X SPECIFIC - TextMate, w is to wait for TextMate window to close

# Ruby specific
export RUBYOPT="rubygems"
# export RUBYLIB=~/proj/mygems
# the above was going to be used for etc. but instead we etc.

# Svn specific
svgetinfo (){
  sv info $@
  sv log $@
}

# Symfony specific
# symfony bash completion
[ -f ~/.symfony_completion ] && source ~/.symfony_completion


# hipe says the below is ridiculous.  No reason to memorize the aliases for not often used commands,
## it will mess you up when you find yourself somewhere without this script.  But pretty colors.
#alias svshowcommands="echo -e '${COLOR_BROWN}Available commands:
#  ${COLOR_GREEN}sv
#  ${COLOR_GREEN}sv${COLOR_NC}help
#  ${COLOR_GREEN}sv${COLOR_NC}import    ${COLOR_GRAY}Example: import ~/projects/my_local_folder http://svn.foo.com/bar
#  ${COLOR_GREEN}sv${COLOR_NC}checkout  ${COLOR_GRAY}Example: svcheckout http://svn.foo.com/bar
#  ${COLOR_GREEN}sv${COLOR_NC}status
#  ${COLOR_GREEN}sv${COLOR_NC}status${COLOR_GREEN}on${COLOR_NC}server
#  ${COLOR_GREEN}sv${COLOR_NC}add       ${COLOR_GRAY}Example: svadd your_file
#  ${COLOR_GREEN}sv${COLOR_NC}add${COLOR_GREEN}all${COLOR_NC}    ${COLOR_GRAY}Note: adds all files not in repository [recursively]
#  ${COLOR_GREEN}sv${COLOR_NC}delete    ${COLOR_GRAY}Example: svdelete your_file
#  ${COLOR_GREEN}sv${COLOR_NC}diff      ${COLOR_GRAY}Example: svdiff your_file
#  ${COLOR_GREEN}sv${COLOR_NC}commit    ${COLOR_GRAY}Example: svcommit
#  ${COLOR_GREEN}sv${COLOR_NC}update    ${COLOR_GRAY}Example: svupdate
#  ${COLOR_GREEN}sv${COLOR_NC}get${COLOR_GREEN}info${COLOR_NC}   ${COLOR_GRAY}Example: svgetinfo your_file
#  ${COLOR_GREEN}sv${COLOR_NC}blame     ${COLOR_GRAY}Example: svblame your_file
#'"

## You need to create fmdiff and fmresolve, which can be found at: http://ssel.vub.ac.be/ssel/internal:fmdiff
#alias svdiff='sv diff --diff-cmd fmdiff' # OS-X SPECIFIC
## Use diff for command line diff, use fmdiff for gui diff, and svdiff for subversion diff
#

# Ruby rvm specific
# if [[ -s /usr/local/rvm/scripts/rvm ]] ; then source /usr/local/rvm/scripts/rvm ; fi
#
#   if [[ -s ~/.rvm/scripts/rvm ]] ;
#     then source ~/.rvm/scripts/rvm ;
#   fi

if [[ -s ~/.local-bashrc ]] ; then
  source ~/.local-bashrc
fi


source ~/.bash-aliases
